Option Explicit

' Constants
Private Const PYTHON_SCRIPT As String = "anki_excel_tool.py"
Private Const ANKI_HEADERS As String = "#separator:tab,#html:true,#guid column:1,#notetype column:2,#deck column:3,#tags column:9"

' Main function to import Anki file
Public Sub ImportFromAnki()
    On Error GoTo ErrorHandler
    
    Dim ankiFile As String
    Dim excelFile As String
    Dim pythonPath As String
    Dim scriptPath As String
    Dim command As String
    Dim result As Long
    
    ' Get Anki export file from user - default to Croatian Language folder
    Dim defaultPath As String
    defaultPath = "C:\Users\JohnL\OneDrive\Media\Croatian Language\ANKI_EXPORT_ADDED_PRONUNCIATION\"
    
    ' Change to the Croatian Language directory before opening file picker
    ChDir defaultPath
    
    ankiFile = Application.GetOpenFilename("Text Files (*.txt),*.txt", , "Select Anki Export File")
    If ankiFile = "False" Then
        MsgBox "No file selected. Operation cancelled.", vbInformation
        Exit Sub
    End If
    
    ' Get Python path
    pythonPath = GetPythonPath()
    If pythonPath = "" Then
        MsgBox "Python not found. Please ensure Python is installed and in your PATH.", vbCritical
        Exit Sub
    End If
    
    ' Get script path (use relative path from Excel file location)
    scriptPath = GetScriptPath()
    If scriptPath = "" Then
        MsgBox "Python script not found. Please ensure anki_excel_tool.py is in the project root directory." & vbCrLf & _
               "Expected location: " & GetProjectRoot() & "\" & PYTHON_SCRIPT, vbCritical
        Exit Sub
    End If
    
    ' Generate Excel output path
    excelFile = Replace(ankiFile, ".txt", "-EXCEL.xlsx")
    
    ' Build command
    command = """" & pythonPath & """ """ & scriptPath & """ """ & ankiFile & """ --excel --output """ & excelFile & """"
    
    ' Show progress
    Application.StatusBar = "Converting Anki file to Excel format..."
    Application.ScreenUpdating = False
    
    ' Execute Python script
    result = Shell(command, vbNormalFocus)
    
    ' Wait a moment for the script to complete
    Application.Wait Now + TimeValue("00:00:03")
    
    ' Check if Excel file was created
    If Dir(excelFile) <> "" Then
        ' Open the created Excel file
        Workbooks.Open excelFile
        Application.StatusBar = False
        MsgBox "Anki file successfully converted to Excel format!" & vbCrLf & "File: " & excelFile, vbInformation
    Else
        Application.StatusBar = False
        MsgBox "Error: Excel file was not created. Please check the Python script output.", vbCritical
    End If
    
    Application.ScreenUpdating = True
    Exit Sub
    
ErrorHandler:
    Application.StatusBar = False
    Application.ScreenUpdating = True
    MsgBox "Error during import: " & Err.Description, vbCritical
End Sub

' Main function to export to Anki format
Public Sub ExportToAnki()
    On Error GoTo ErrorHandler
    
    Dim outputFile As String
    Dim currentSheet As Worksheet
    Dim lastRow As Long
    Dim lastCol As Long
    Dim i As Long, j As Long
    Dim outputData As String
    Dim cellValue As Variant
    
    ' Get current worksheet
    Set currentSheet = ActiveSheet
    
    ' Get save location - strip "-EXCEL" from filename if present
    Dim suggestedName As String
    suggestedName = currentSheet.Name
    If Right(suggestedName, 6) = "-EXCEL" Then
        suggestedName = Left(suggestedName, Len(suggestedName) - 6)
    End If
    
    ' Default to Croatian Language folder for save location
    Dim defaultPath As String
    defaultPath = "C:\Users\JohnL\OneDrive\Media\Croatian Language\ANKI_EXPORT_ADDED_PRONUNCIATION\"
    
    ' Change to the Croatian Language directory before opening save dialog
    ChDir defaultPath
    
    outputFile = Application.GetSaveAsFilename(InitialFileName:=suggestedName & "-CLEANED.txt", _
                                             FileFilter:="Text Files (*.txt),*.txt", _
                                             Title:="Save Anki File As")
    If outputFile = "False" Then
        MsgBox "No save location selected. Operation cancelled.", vbInformation
        Exit Sub
    End If
    
    ' Get data range (exclude instruction lines at bottom)
    lastRow = currentSheet.Cells(currentSheet.Rows.Count, 1).End(xlUp).Row
    
    ' Skip instruction lines at the bottom
    While lastRow > 1 And (Trim(currentSheet.Cells(lastRow, 1).Value) = "" Or _
          InStr(Trim(currentSheet.Cells(lastRow, 1).Value), "Note: This file") > 0 Or _
          InStr(Trim(currentSheet.Cells(lastRow, 1).Value), "Use the 'Export") > 0)
        lastRow = lastRow - 1
    Wend
    
    lastCol = currentSheet.Cells(1, currentSheet.Columns.Count).End(xlToLeft).Column
    
    ' Start building output
    outputData = ""
    
    ' Add Anki headers
    Dim headers() As String
    headers = Split(ANKI_HEADERS, ",")
    For i = 0 To UBound(headers)
        outputData = outputData & headers(i) & vbCrLf
    Next i
    
    ' Add data rows (skip header row)
    For i = 2 To lastRow
        Dim rowData As String
        rowData = ""
        
        For j = 1 To lastCol
            ' Get cell value and convert to string safely
            cellValue = currentSheet.Cells(i, j).Value
            If IsNull(cellValue) Or IsEmpty(cellValue) Or cellValue = "" Then
                cellValue = ""
            Else
                cellValue = Trim(CStr(cellValue))
            End If
            
            ' Add tab separator (except for last column)
            If j < lastCol Then
                rowData = rowData & cellValue & vbTab
            Else
                rowData = rowData & cellValue
            End If
        Next j
        
        outputData = outputData & rowData & vbCrLf
    Next i
    
    ' Write to file using ADODB Stream for proper UTF-8 encoding
    Dim stream As Object
    Set stream = CreateObject("ADODB.Stream")
    
    ' Set up stream for UTF-8 writing
    stream.Type = 2 ' Text
    stream.Charset = "UTF-8"
    stream.Open
    
    ' Write the data
    stream.WriteText outputData
    
    ' Save to file
    stream.SaveToFile outputFile, 2 ' Overwrite
    
    ' Close stream
    stream.Close
    Set stream = Nothing
    
    MsgBox "File successfully exported to Anki format with UTF-8 encoding!" & vbCrLf & "File: " & outputFile, vbInformation
    Exit Sub
    
ErrorHandler:
    MsgBox "Error during export: " & Err.Description & vbCrLf & "Line: " & Erl & vbCrLf & "Error Number: " & Err.Number, vbCritical
End Sub

' Helper function to get Python path
Private Function GetPythonPath() As String
    Dim pythonPaths() As String
    Dim path As Variant
    Dim testPath As String
    Dim result As Long
    
    ' Common Python paths (in order of preference)
    pythonPaths = Split("python.exe,py.exe,python3.exe,py -3", ",")
    
    ' Test each path
    For Each path In pythonPaths
        testPath = Trim(path)
        ' Simple test - just try to run Python
        On Error Resume Next
        result = Shell(testPath & " --version", vbHide)
        If Err.Number = 0 And result > 0 Then
            GetPythonPath = testPath
            Exit Function
        End If
        On Error GoTo 0
    Next path
    
    ' If not found, return empty string
    GetPythonPath = ""
End Function

' Function to validate Anki format
Public Sub ValidateAnkiFormat()
    Dim currentSheet As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim errors As String
    Dim errorCount As Long
    
    Set currentSheet = ActiveSheet
    lastRow = currentSheet.Cells(currentSheet.Rows.Count, 1).End(xlUp).Row
    errors = ""
    errorCount = 0
    
    ' Check each row (skip header)
    For i = 2 To lastRow
        ' Check for required fields
        If Trim(currentSheet.Cells(i, 1).Value) = "" Then
            errors = errors & "Row " & i & ": Missing GUID" & vbCrLf
            errorCount = errorCount + 1
        End If
        
        If Trim(currentSheet.Cells(i, 3).Value) = "" Then
            errors = errors & "Row " & i & ": Missing Deck name" & vbCrLf
            errorCount = errorCount + 1
        End If
        
        If Trim(currentSheet.Cells(i, 4).Value) = "" Then
            errors = errors & "Row " & i & ": Missing Croatian content" & vbCrLf
            errorCount = errorCount + 1
        End If
        
        If Trim(currentSheet.Cells(i, 5).Value) = "" Then
            errors = errors & "Row " & i & ": Missing English content" & vbCrLf
            errorCount = errorCount + 1
        End If
    Next i
    
    ' Show results
    If errorCount = 0 Then
        MsgBox "Validation passed! All required fields are present.", vbInformation
    Else
        MsgBox "Validation found " & errorCount & " issues:" & vbCrLf & vbCrLf & errors, vbExclamation
    End If
End Sub

' Function to check system requirements
Public Sub CheckRequirements()
    Dim pythonPath As String
    Dim scriptPath As String
    Dim missingItems As String
    
    missingItems = ""
    
    ' Check Python
    pythonPath = GetPythonPath()
    If pythonPath = "" Then
        missingItems = missingItems & "• Python is not installed or not in PATH" & vbCrLf
    End If
    
    ' Check Python script
    scriptPath = GetScriptPath()
    If scriptPath = "" Then
        missingItems = missingItems & "• Python script (anki_excel_tool.py) not found" & vbCrLf
    End If
    
    ' Show results
    If missingItems = "" Then
        MsgBox "All requirements are met!" & vbCrLf & vbCrLf & _
               "Python: " & pythonPath & vbCrLf & _
               "Script: " & scriptPath, vbInformation, "System Check"
    Else
        MsgBox "Missing requirements:" & vbCrLf & vbCrLf & missingItems & vbCrLf & _
               "Please install missing components before using Anki Tools.", vbExclamation, "System Check"
    End If
End Sub

' Help function
Public Sub ShowAnkiHelp()
    Dim helpText As String
    
    helpText = "Anki Tools - Help" & vbCrLf & vbCrLf & _
               "IMPORT FROM ANKI:" & vbCrLf & _
               "1. Click 'Import from Anki' button" & vbCrLf & _
               "2. Select your Anki export file (.txt)" & vbCrLf & _
               "3. The Python script will clean HTML and convert to Excel" & vbCrLf & _
               "4. A new Excel file will open with your data" & vbCrLf & vbCrLf & _
               "EDIT IN EXCEL:" & vbCrLf & _
               "1. Make your changes in the Excel file" & vbCrLf & _
               "2. No encoding issues - work in native Excel format" & vbCrLf & vbCrLf & _
               "EXPORT TO ANKI:" & vbCrLf & _
               "1. Click 'Export to Anki' button" & vbCrLf & _
               "2. Choose save location" & vbCrLf & _
               "3. File will be converted to Anki format with UTF-8 encoding" & vbCrLf & vbCrLf & _
               "VALIDATE FORMAT:" & vbCrLf & _
               "1. Click 'Validate Format' to check required fields" & vbCrLf & _
               "2. Ensures all necessary data is present" & vbCrLf & vbCrLf & _
               "REQUIREMENTS:" & vbCrLf & _
               "- Python installed and in PATH" & vbCrLf & _
               "- anki_excel_tool.py in project root directory" & vbCrLf & _
               "- Macros enabled in Excel" & vbCrLf & vbCrLf & _
               "TROUBLESHOOTING:" & vbCrLf & _
               "- Use 'Check Requirements' to verify system setup" & vbCrLf & _
               "- Ensure Excel file is in the excel/ subdirectory"
    
    MsgBox helpText, vbInformation, "Anki Tools Help"
End Sub

' Debug function to check paths
Public Sub DebugPaths()
    Dim excelPath As String
    Dim projectRoot As String
    Dim scriptPath As String
    
    excelPath = ThisWorkbook.Path
    projectRoot = GetProjectRoot()
    scriptPath = GetScriptPath()
    
    MsgBox "Excel Path: " & excelPath & vbCrLf & _
           "Project Root: " & projectRoot & vbCrLf & _
           "Script Path: " & scriptPath & vbCrLf & _
           "Script Exists: " & (Dir(scriptPath) <> ""), vbInformation, "Path Debug"
End Sub

' Helper function to get the project root directory
Private Function GetProjectRoot() As String
    Dim projectRoot As String
    
    ' Try to find the project root by looking for the Python script
    ' Start from the current directory and work backwards
    projectRoot = CurDir()
    
    ' Check if we're in the project root (has anki_excel_tool.py)
    If Dir(projectRoot & "\" & PYTHON_SCRIPT) <> "" Then
        GetProjectRoot = projectRoot
        Exit Function
    End If
    
    ' Check if we're in the excel subdirectory
    If Dir(projectRoot & "\..\" & PYTHON_SCRIPT) <> "" Then
        GetProjectRoot = projectRoot & "\.."
        Exit Function
    End If
    
    ' If not found, try the actual project path
    projectRoot = "C:\Users\JohnL\DevProjects\AnkiExportCleaner"
    If Dir(projectRoot & "\" & PYTHON_SCRIPT) <> "" Then
        GetProjectRoot = projectRoot
        Exit Function
    End If
    
    ' Fallback to current directory
    GetProjectRoot = CurDir()
End Function

' Helper function to get the Python script path
Private Function GetScriptPath() As String
    Dim scriptPath As String
    
    scriptPath = GetProjectRoot() & "\" & PYTHON_SCRIPT
    
    ' Check if script exists
    If Dir(scriptPath) <> "" Then
        GetScriptPath = scriptPath
    Else
        GetScriptPath = ""
    End If
End Function 